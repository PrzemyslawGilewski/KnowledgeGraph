<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Create new Content" xml:space="preserve">
    <value>Dodaj nową Treść</value>
  </data>
  <data name="Every Content can have one Source and every Source can have one Source Type and one or many Authors associated with it." xml:space="preserve">
    <value>Każda Treść może posiadać jedno Źródło, a każde Źródło jeden Typ Źródła oraz jeden lub wielu powiązanych Autorów.</value>
  </data>
  <data name="Future improvements" xml:space="preserve">
    <value>Przyszłe ulepszenia</value>
  </data>
  <data name="How to use the application?" xml:space="preserve">
    <value>Jak używać aplikacji?</value>
  </data>
  <data name="Log in" xml:space="preserve">
    <value>Zaloguj się</value>
  </data>
  <data name="Purpose of the application" xml:space="preserve">
    <value>Cel aplikacji</value>
  </data>
  <data name="Stay tuned!" xml:space="preserve">
    <value>Czekaj na więcej!</value>
  </data>
  <data name="The central idea is the Concept with its Contents .You can add Categories to have better organisation of Concepts." xml:space="preserve">
    <value>Centralną ideą jest Pojęcie z Treściami. Możesz dodać Kategorie w celu lepszej organizacji Pojęć.</value>
  </data>
  <data name="The next improvement will be the possibility to build Learning Path based on the Concepts you provided." xml:space="preserve">
    <value>Kolejnym ulepszeniem będzie możliwość budowania Ścieżki Nauki opartej na wprowadzonych przez Ciebie Pojęciach.</value>
  </data>
  <data name="This application was developed to help you better organise and search the knowledge you are interested to keep." xml:space="preserve">
    <value>Ta aplikacja powstała, aby pomóc Tobie w lepszej organizacji i wyszukiwaniu wiedzy.</value>
  </data>
  <data name="We plan to allow grouping of Concepts in hierarchy and build more robust Editor for Content input." xml:space="preserve">
    <value>Planujemy umożliwienie grupowania Pojęć i budowę bardziej złożonego Edytora do wprowadzania Treści</value>
  </data>
  <data name="Welcome to KnowledgeGraph" xml:space="preserve">
    <value>Witaj w KnowledgeGraph</value>
  </data>
  <data name="You can fastly jump from Concepts and Contents to Source, from Source to Authors and so on." xml:space="preserve">
    <value>Możesz szybko przeskakiwać z Pojęć i Treści do Źródeł, a ze Źródeł do Autorów itd. </value>
  </data>
</root>